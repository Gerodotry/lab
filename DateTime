#include<iostream>
#include<iomanip>
#include<string>
using namespace std;
const int ext = 86400;//seconds in day
int check_leap_year(int year)
{
    if( year%4==0 && year%100!=0 || year%400==0 && year !=0)   //if year is a leap year
    return 1;
    
    else
    return 0;
}
int no_of_days_in_month(int month, int year)
{
    // jan, march, may, july, aug, oct, dec contains 31 days
    if( month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12 )
        return 31;
        
    // april, jun, sept, nov contains 30 days
    if( month==4 || month==6 || month==9 || month==11 )
        return 30;
    
    if( month==2 )
    {
        int n=check_leap_year(year);
        if(n==1)    // if year is a leap year then Feb will contain 29 days, otherwise it contains 28 days
        return 29;
    }
    return 28;
}
class Time
{
    private :
        int year;
        int month;
        int day;
        int hour;
        int minute;
        long int second;
    public :
        //constructor with default value 0
        Time(int y= 0, int m  = 0, int d = 0,int h=0,int min=0,long int s=0);
        //setter function 
        void setTime(int y, int m, int d,int h,int min,long int s);
        //print description of object in yh:mm:ss
        void print();
        int decompress(long int sum);
        string Nweek();
        long int dif(Time);  
        long int add(Time);
        void get_Year_and_Month_week();
}; 
Time :: Time(int y, int m, int d,int h,int min,long int s)
{
    year = y;
    month = m;
    day = d;
    hour=h;
    minute=min;
    second=s;
} 
void Time :: setTime(int y, int m, int d,int h,int min,long int s)
{
    year = y;
    month = m;
    day = d; 
    hour=h;
    minute=min;
    second=s;    
}        
void Time :: print()
{
    cout<< setw(2) << setfill('0') << year << ":"
        << setw(2) << setfill('0') << month << ":"
        << setw(2) << setfill('0') << day << ":"
        << setw(2) << setfill('0') << hour << ":"
        << setw(2) << setfill('0') << minute << ":"
        << setw(2) << setfill('0') << second << "\n";    
}
long int CompToSec(int year,int month,int day,int hour,int minute ,long int second){
    long int result=0;
    for(int y=1; y<year; y++)
        {
            if(check_leap_year(y))
                result=result+366;
            else
                result=result+365;
        }
    for(int i=1; i<month; i++)
    {
            result=result+no_of_days_in_month(i,year);
    }
    if (day < 1 ){day = day-1;}

   result = (result+day)*24*60*60 + hour*60*60 + minute*60 + second;
return result;}
string Time :: Nweek(){
long int temp=0;
int b = 0;
for(int i=1; i<month; i++)
    {
            b=b+no_of_days_in_month(i,year);
    }
        for(int i=1; i<year; i++)
        {
            if(check_leap_year(i))
                temp=temp+366;
            else
                temp=temp+365;
        }
        long int week = temp + b + day;
        string  res; 
switch (week%7)
    {
    case 1: res = "monday";
        break;
    case 2: res = "Tuesday";
        break;
    case 3: res = "Wednesday";
        break;
    case 4: res = "Thursday";
        break;
    case 5: res = "Friday";
        break;
    case 6: res = "Saturday";
        break;
    case 0: res = "Sunday";
        break;
    default:
        break;
    }
    return res;
}
void Time:: get_Year_and_Month_week(){
    int findday=0;
  for(int i=1; i<month; i++)
    {
            findday=result+no_of_days_in_month(i,year);
    }
    int year_week = findday + day;
    year_week = month_week/7;
    int month_week = day/7;
    cout <<  year_week <<" "<< month_week ;
}
int Time::decompress(long int sum){
  day = sum / ext;
  int not_days = sum % ext;
  cout << not_days;
  long int temp = 0;
   year=1;
   month = 1;
   hour = 0;
   minute = 0;
   second = 0;
while( day > 365 )
        {   
            if(check_leap_year(year))
                temp=temp+366;
            else
                {temp=temp+365;}
                ++year;
                day = day - temp;
                temp = 0;
        }

while (day > no_of_days_in_month(month,year) ) {
   day = day - no_of_days_in_month(month,year);
    month++;
   }
    hour = not_days / 3600;
    minute = not_days % 3600 /60 ;
    second = not_days % 60;

   cout << "\n" << year << ":"<< month << ":" <<day << ":" << hour<< ":" << minute << ":" << second << endl; 
   return 0;
}
long int Time:: dif(Time an){
    long int result = 0;
    long int a = CompToSec(an.year,an.month,an.day,an.hour,an.minute,an.second);
    long int c = CompToSec(year,month,day,hour,minute,second);
    if(a>c){
      result = a-c;
    }
    else{
    result = c-a;
    }
    return result;
}
long int Time:: add(Time some ){
   long int a =  CompToSec( year, month, day, hour, minute , second);
   long int c = dif(some);
   c = a+c;
   c = some.decompress(c);
  return c;
}
int main()
{  
    Time t1(1, 12 , 8 ,8,8,8 );
    t1.print(); 
    Time t2; 
    t2.setTime(1, 11,9,22,22,22); 
    t2.print();  
}
